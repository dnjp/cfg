;; ----------------------------------------------------------------------------

;;                                   INITIALIZATION

;; ----------------------------------------------------------------------------
(require 'package)

(add-to-list                                            ;; ensure default emacs packages are loaded
 'load-path "/usr/local/share/emacs/site-lisp/")
;;                                                      ;; add repositories
(defvar gnu
  '("gnu" . "https://elpa.gnu.org/packages/"))
(defvar melpa
  '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives gnu t)
(add-to-list 'package-archives melpa t)
(package-initialize)                                    ;; initialize all packages
(package-refresh-contents)                              ;; refresh packages
(use-package auto-package-update                        ;; auto update packages (dep)
   :ensure t
   :config
   (setq auto-package-update-delete-old-versions t
	 auto-package-update-interval 4)
   (auto-package-update-maybe))
;; ----------------------------------------------------------------------------

;;                                 BASIC SETTINGS

;; ----------------------------------------------------------------------------
(setq user-full-name "Daniel Posthuma")                ;; set user information
(setq user-mail-address "dnjp@posteo.org")
(setq create-lockfiles nil)                            ;; don't create lockfiles
(global-auto-revert-mode t)                            ;; automatically reload changed files
(setq backup-directory-alist                           ;; put backup files in /tmp
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq backup-by-copying t)                             ;; make backups by copying
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
(global-set-key (kbd "C-x k") 'kill-this-buffer)       ;; kill buffer right away
(setq gc-cons-threshold 50000000)                      ;; increase gc size to 50mb
(setq large-file-warning-threshold 100000000)          ;; increase large file size
(prefer-coding-system 'utf-8)                          ;; use utf-8
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(fset 'yes-or-no-p 'y-or-n-p)                          ;; y/n instead of yes/no
(add-hook 'before-save-hook 'whitespace-cleanup)       ;; always cleanup whitespace
(setq vc-follow-symlinks nil)                          ;; always follow symlinks
;; ----------------------------------------------------------------------------
;;                                     SHELL
;; ----------------------------------------------------------------------------
(global-set-key (kbd "C-c b") '(lambda ()  (interactive) (ansi-term "/usr/bin/bash")))
;; ----------------------------------------------------------------------------
;;                                 EMACS SERVER
;; ----------------------------------------------------------------------------
;; runs the Emacs server if it is not running
(require 'server)
(if (not (server-running-p)) (server-start))
;; ----------------------------------------------------------------------------

;;                                 VISUAL SETTINGS

;; ----------------------------------------------------------------------------
(menu-bar-mode 1)                                      ;; turn on menu bar
(toggle-scroll-bar -1)                                 ;; turn off scrollbar
(tool-bar-mode -1)                                     ;; turn off tool bar
;; (set-face-font 'default "Meslo LG S-14")               ;; set font
(set-face-font 'default "Meslo LG S-9")               ;; set font
(set-face-font 'variable-pitch "Lucida Sans-9")
(set-face-attribute 'fringe nil :background nil)       ;; fringe color
(use-package minimal-theme
  :ensure t
  :config
  (load-theme 'minimal-light 't))
(show-paren-mode)                                      ;; highlight matching parenthesis
(fringe-mode '(0 . 0))                                 ;; no fringe
(setq visible-bell t)                                  ;; no sound
(setq ring-bell-function 'ignore)
(setq-default line-spacing 0)                          ;; Line spacing, can be 0 for code and 1 or 2 for text
(setq x-underline-at-descent-line t)                   ;; Underline line at descent position, not baseline position
(setq widget-image-enable nil)                         ;; No ugly button for checkboxes
(tooltip-mode 0)                                       ;; No Tooltips
(setq initial-scratch-message "")                      ;; Don't use messages that you don't read
(setq inhibit-startup-message t)                       ;; don't show startup message
(setq inhibit-startup-screen t)                        ;; don't open to startup screen
(setq-default require-final-newline 't)
(setq column-number-mode t)                            ;; show column # in modeline
(setq size-indication-mode t)                          ;; show current file size
(setq vc-follow-symlinks nil)                          ;; always follow symlinks
;; ----------------------------------------------------------------------------
;;                                 LINE WRAPPING
;; ----------------------------------------------------------------------------
;; In text mode, I don't want it auto-indenting for the first
;; line in the file, or lines following blank lines.
;; Everywhere else is okay.
(defun newline-and-text-indent ()
  "Insert a newline, then indent the next line sensibly for text"
  (interactive)
  (cond
   ;; Beginning of buffer, or beginning of an existing line, don't indent:
   ((or (bobp) (bolp)) (newline))

   ;; If we're on a whitespace-only line,
   ((and (eolp)
	 (save-excursion (re-search-backward "^\\(\\s \\)*$"
					     (line-beginning-position) t)))
    ;; ... delete the whitespace, then add another newline:
    (kill-line 0)
    (newline))

   ;; Else (not on whitespace-only) insert a newline,
   ;; then add the appropriate indent:
   (t (insert "\n")
      (indent-according-to-mode))
   ))
(defun text-indent-hook ()
  (local-set-key "\C-m" 'newline-and-text-indent)
  )
(setq text-mode-hook 'text-indent-hook)

(use-package visual-fill-column
  :ensure t)
(setq-default fill-column 80)
(add-hook 'text-mode-hook 'visual-line-mode)
(add-hook 'text-mode-hook 'visual-fill-column-mode)
;; ----------------------------------------------------------------------------
;;                                 MODELINE
;; ----------------------------------------------------------------------------
;; (defvar-local hidden-mode-line-mode nil)
;; (defvar-local hide-mode-line nil)
;; (define-minor-mode hidden-mode-line-mode
;;   "Minor mode to hide the mode-line in the current buffer."
;;   :init-value nil
;;   :global nil
;;   :variable hidden-mode-line-mode
;;   :group 'editing-basics
;;   (if hidden-mode-line-mode
;;       (setq hide-mode-line mode-line-format
;;             mode-line-format nil)
;;     (setq mode-line-format hide-mode-line
;;           hide-mode-line nil))
;;   (force-mode-line-update)
;;   ;; Apparently force-mode-line-update is not always enough to
;;   ;; redisplay the mode-line
;;   (redraw-display)
;;   (when (and (called-interactively-p 'interactive)
;;              hidden-mode-line-mode)
;;     (run-with-idle-timer
;;      0 nil 'message
;;      (concat "Hidden Mode Line Mode enabled.  "
;;              "Use M-x hidden-mode-line-mode to make the mode-line appear."))))
;; hide modeline
;; (hidden-mode-line-mode 1)
;; (add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)
;; ;; toggle Modeline with “C-s-SPC”
;; (defvar-local header-line-format nil)
;;  (defun mode-line-in-header ()
;;    (interactive)
;;    (if (not header-line-format)
;;        (setq header-line-format mode-line-format
;;              mode-line-format nil)
;;      (setq mode-line-format header-line-format
;;            header-line-format nil))
;;    (set-window-buffer nil (current-buffer)))
;;  (global-set-key (kbd "C-s-SPC") 'mode-line-in-header)
;; ;; ----------------------------------------------------------------------------
;;                                   GIT
;; ----------------------------------------------------------------------------
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "M-g") 'magit))
;; ----------------------------------------------------------------------------
;;                                  SEARCHING
;; ----------------------------------------------------------------------------
(use-package rg :ensure t)                               ;; ripgrep
(use-package ido-vertical-mode :ensure t)                ;; vertical ido
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
;; ----------------------------------------------------------------------------
;;                                   TAGS
;; ----------------------------------------------------------------------------
(setq tags-table-list '("~/work/martin-bidder/TAGS"))

(defun ido-select-tags-file ()
  "selects the active tags file"
  (interactive)
  (visit-tags-table
   (ido-completing-read "Select from list: " tags-table-list)))

(defun ido-find-file-in-tag-files ()
  "find files in active tags file"
  (interactive)
  (save-excursion
    (let ((enable-recursive-minibuffers t))
      (visit-tags-table-buffer tags-file-name))
    (find-file
     (expand-file-name
      (ido-completing-read
       "Project file: " (tags-table-files) nil t)))))

(setq path-to-ctags "/usr/bin/ctags")
(defun create-tags (dir-name)
  "Create tags file."
  (interactive "Directory: ")
  (shell-command
   (format "%s -f TAGS -e -R %s" path-to-ctags (directory-file-name dir-name))))

(defun er-refresh-etags (&optional extension)
  "Run etags on all peer files in current dir and reload them silently."
  (interactive)
  (shell-command (format "etags *.%s" (or extension "el")))
  (let ((tags-revert-without-query t))  ; don't query, revert silently
    (visit-tags-table default-directory nil)))

(defadvice find-tag (around refresh-etags activate)
  "Rerun etags and reload tags if tag not found and redo find-tag.
   If buffer is modified, ask about save before running etags."
  (let ((extension (file-name-extension (buffer-file-name))))
    (condition-case err
	ad-do-it
      (error (and (buffer-modified-p)
		  (not (ding))
		  (y-or-n-p "Buffer is modified, save it? ")
		  (save-buffer))
	     (er-refresh-etags extension)
	     ad-do-it))))
;; ----------------------------------------------------------------------------
;;                                   VI
;; ----------------------------------------------------------------------------
(use-package undo-tree :ensure t)                       ;; undo-tree (redo for evil)
(global-undo-tree-mode)                                 ;; enable undo-tree (evil)

(defun liu233w/ex-save-kill-buffer-and-close ()
  (interactive)
  (save-buffer)
  (kill-this-buffer))

(use-package evil
  :ensure t
  :init
  ;; (evil-set-leader 'normal (kbd "SPC"))               ;; set leader key in normal state
  (setq evil-undo-system 'undo-redo)                  ;; use undo-tree for evil functionality
  (setq evil-shift-width 8)                           ;; set default indent level
  (setq evil-want-C-u-scroll t)                       ;; use ctrl-u for scrolling

  ;; search settings
  (setq evil-search-module 'evil-search)
  (setq evil-search-wrap t
	evil-regexp-search t)
  :config                                               ;; tweak evil configuration after loading it
  (define-key evil-normal-state-map (kbd ";") (lambda () (interactive) (evil-ex "")))
  ;; switch to opposite split like traditional vi
  (define-key evil-normal-state-map (kbd "C-w") 'next-window-any-frame)
  ;; quickly switch to last buffer
  (define-key evil-normal-state-map (kbd "C-l") 'evil-switch-to-windows-last-buffer)
  ;; more intuitive commenting
  (define-key evil-normal-state-map (kbd "C-/") 'comment-line)
  ;; project search
  (define-key evil-normal-state-map (kbd "C-p") 'ido-find-file-in-tag-files)

  ;; :q should kill the current buffer rather than quitting emacs entirely
  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "wq" 'liu233w/ex-save-kill-buffer-and-close)

  ;; Need to type out :quit to close emacs
  (evil-ex-define-cmd "quit" 'evil-quit)

  ;; don't run evil in the following modes
  (evil-set-initial-state 'term-mode 'emacs)
  (evil-set-initial-state 'info-mode 'emacs)
  (evil-set-initial-state 'special-mode 'emacs)
  (evil-set-initial-state 'xref-mode 'emacs)

  ;; handle indentation properly
  (add-hook 'python-mode-hook
	    (function (lambda ()
			(setq evil-shift-width python-indent))))
  (add-hook 'go-mode-hook
	    (function (lambda ()
			(setq evil-shift-width 8))))
  (add-hook 'js-mode-hook
	    (function (lambda ()
			(setq evil-shift-width js-indent-level))))
  (add-hook 'c-mode-hook
	    (function (lambda ()
			(setq evil-shift-width c-basic-offset))))
  (add-hook 'java-mode-hook
	    (function (lambda ()
			(setq evil-shift-width c-basic-offset))))

  (evil-mode) ;; start evil
)


;; ----------------------------------------------------------------------------

;;                                 KEYBOARD

;; ----------------------------------------------------------------------------
(global-set-key (kbd "C-S-f") 'ido-find-file-in-tag-files) ;; tag based search
(global-set-key (kbd "C-S-p") 'ido-select-tags-file) ;; tag based search
(global-set-key (kbd "C-c C-b") 'ibuffer) ;; buffer management
;; ----------------------------------------------------------------------------

;;                             LANGUAGE SETTINGS

;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------
;;                                    GO
;; ----------------------------------------------------------------------------
(use-package go-mode :ensure t)
(add-hook 'before-save-hook 'gofmt-before-save)
;; ----------------------------------------------------------------------------
;;                                 PROTOBUF
;; ----------------------------------------------------------------------------
(use-package protobuf-mode :ensure t)
;; ----------------------------------------------------------------------------
;;                                 TERRAFORM
;; ----------------------------------------------------------------------------
(use-package terraform-mode
  :init
  (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode))
;; ----------------------------------------------------------------------------
;;                                   YAML
;; ----------------------------------------------------------------------------
(use-package yaml-mode :ensure t)
;; ----------------------------------------------------------------------------
;;                                   MARKDOWN
;; ----------------------------------------------------------------------------
(use-package markdown-mode :ensure t)
(add-hook 'text-mode-hook
  '(lambda ()
     (setq indent-tabs-mode nil)
     (setq tab-width 2)
     (setq indent-line-function (quote insert-tab))))
;; ----------------------------------------------------------------------------
;;                                   JAVA
;; ----------------------------------------------------------------------------
(add-hook 'java-mode-hook (lambda ()
			    (setq c-basic-offset 2
				  tab-width 2
				  indent-tabs-mode nil)))
;; ----------------------------------------------------------------------------
;;                                   C / C++
;; ----------------------------------------------------------------------------
(add-to-list 'auto-mode-alist '("\\.\\(cc\\|cpp\\|hpp\\|hh\\|cxx\\|c++\\|hxx\\)\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.\\(c\\|h\\)\\'" . c-mode))
(defun my-c++-mode-hook ()
  (setq c-basic-offset 2)
  (setq tab-width 2)
  (setq indent-tabs-mode f))
(add-hook 'c++-mode-hook 'my-c++-mode-hook)
(defun my-c-mode-hook ()
  (setq c-basic-offset 8)
  (setq tab-width 8)
  (setq indent-tabs-mode t))
(add-hook 'c-mode-hook 'my-c-mode-hook)
;; ----------------------------------------------------------------------------
;;                                    LATEX
;; ----------------------------------------------------------------------------
(use-package auctex
  :ensure t
  :init
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'font-lock-mode)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)
  (eval-after-load "tex"
    '(setcar (cdr (assoc 'output-pdf TeX-view-program-selection)) "Okular")))
;; ----------------------------------------------------------------------------

;;                                    TOOLS

;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------
;;                                     SQL
;; ----------------------------------------------------------------------------
(use-package sql :ensure t)
;; ----------------------------------------------------------------------------

;;                                    PRODUCTIVITY

;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------
;;                               RECENTLY OPENED FILES
;; ----------------------------------------------------------------------------
;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)

;; enable recent files mode.
(recentf-mode t)

; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))
;; ----------------------------------------------------------------------------

;;                                    EMAIL

;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------
;;                                   NOTMUCH
;; ----------------------------------------------------------------------------
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
(autoload 'notmuch "notmuch" "notmuch mail" t)

(setq notmuch-message-mode-hook 'text-indent-hook)
(setq message-mode-hook 'text-indent-hook)

;; mail viewing and composing
;; fix for possible weirdness with notmuch-show-mode and emacs 24.x
(require 'gnus-art)
;; support multiple email accounts
(use-package gnus-alias :ensure t)
(require 'gnus-alias)
(autoload 'gnus-alias-determine-identity "gnus-alias" "" t)

; C-c m opens up Notmuch from any buffer
(global-set-key (kbd "C-c m") `notmuch)

(setq
 ;; ordering / searching
 ;; notmuch-always-prompt-for-sender t
 notmuch-search-oldest-first nil
 ;; sending / composition
 mail-user-agent 'message-user-agent
 message-kill-buffer-on-exit t ; kill buffer after sending mail)
 mail-specify-envelope-from t ; Settings to work with msmtp
 send-mail-function (quote sendmail-send-it)
 sendmail-program "~/.mail/scripts/msmtp-enqueue.sh"
 mail-specify-envelope-from t
 message-sendmail-f-is-evil nil
 mail-envelope-from 'header
 message-sendmail-envelope-from 'header
 message-kill-buffer-on-exit t
 ;; add Cc and Bcc headers to the message buffer
 message-default-mail-headers "Cc: \nBcc: \n"
 ;; accounts
 gnus-alias-identity-alist
 '(("personal"
    nil ;; Does not refer to any other identity
    "Daniel Posthuma <danieljamespost@gmail.com>" ;; Sender address
    "Martin AI" ;; No organization header
    nil ;; No extra headers
    nil ;; No extra body text
    "~/.mail/gmail/signature"
    )
   ("work"
    nil ;; Does not refer to any other identity
    "Daniel Posthuma <daniel@martin.ai>" ;; Sender address
    nil ;; No organization header
    nil ;; No extra headers
    nil ;; No extra body
    "~/.mail/martin/signature"
    )
   ("posteo"
    nil ;; Does not refer to any other identity
    "Daniel Posthuma <dnjp@posteo.org>" ;; Sender address
    nil ;; No organization header
    nil ;; No extra headers
    nil ;; No extra body
    "~/.mail/posteo/signature"
    ))
 ;; Use "posteo" identity by default
 ;; gnus-alias-default-identity "posteo"
 ;; identify identity
 gnus-alias-identity-rules
 '(
   ("danieljamespost@gmail.com" ("any" "@gmail\\.com" both) "personal")
   ("dnjp@posteo.org" ("any" "@posteo\\.org" both) "posteo"))
 ;; ;; notmuch presets
 ;; notmuch-saved-searches '((:name "inbox" :query "tag:inbox AND NOT tag:delete")
 ;;			  (:name "unread" :query "tag:inbox AND NOT tag:delete AND tag:unread")
 ;;			  (:name "work" :query "folder:work/INBOX and tag:inbox \
 ;;                                           and not tag:delete and not tag:archive \
 ;;                                           or folder:work/[Gmail].Starred and folder:work/INBOX and not tag:delete \
 ;;                                           and not tag:archive")
 ;;			  (:name "personal" :query "folder:gmail/INBOX and tag:inbox \
 ;;                                           and not tag:delete and not tag:archive \
 ;;                                           or folder:gmail/[Gmail].Starred and folder:gmail/INBOX and not tag:delete \
 ;;                                           and not tag:archive")
 ;;			  (:name "posteo" :query "folder:posteo/inbox")
 ;;			  )

 )

(add-hook 'message-setup-hook 'gnus-alias-determine-identity)
(add-hook 'message-setup-hook 'gnus-alias-select-identity)

;; (define-key notmuch-show-mode-map "r" 'notmuch-show-reply)
;; (define-key notmuch-show-mode-map "R" 'notmuch-show-reply-sender)
;; (define-key notmuch-search-mode-map "r" 'notmuch-search-reply-to-thread)
;; (define-key notmuch-search-mode-map "R" 'notmuch-search-reply-to-thread-sender)
;; (define-key notmuch-tree-mode-map "r" (notmuch-tree-close-message-pane-and #'notmuch-show-reply))
;; (define-key notmuch-tree-mode-map "R" (notmuch-tree-close-message-pane-and #'notmuch-show-reply-sender))
;; ----------------------------------------------------------------------------

;;                                     ORG

;; ----------------------------------------------------------------------------
(use-package org
  :ensure t
  :config
  (setq org-directory "~/Nextcloud/Org")
  (setq org-agenda-files (list "~/Nextcloud/Org/notes.org"))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (add-hook 'text-mode-hook #'auto-fill-mode)
  (setq org-log-done t))

;; ----------------------------------------------------------------------------
;;                                     END
;; ----------------------------------------------------------------------------

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(yaml-mode terraform-mode protobuf-mode minimal-theme gnus-alias auctex markdown-mode go-mode rg evil undo-tree magit auto-package-update use-package)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-level-2 ((t (:extend nil :foreground "grey20" :height 1.1)))))
