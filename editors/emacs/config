;; ----------------------------------------------------------------------------

;;                                   INITIALIZATION

;; ----------------------------------------------------------------------------
(require 'package)

(add-to-list                                            ;; ensure default emacs packages are loaded
 'load-path "/usr/local/share/emacs/site-lisp/")

;; load plugins
(let ((default-directory "~/.emacs.d/plugins/"))
  (normal-top-level-add-subdirs-to-load-path))

;;                                                      ;; add repositories
(defvar gnu
  '("gnu" . "https://elpa.gnu.org/packages/"))
(defvar melpa
  '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives gnu t)
(add-to-list 'package-archives melpa t)
(package-initialize)                                    ;; initialize all packages
(package-refresh-contents)                              ;; refresh packages
(use-package auto-package-update                        ;; auto update packages (dep)
   :ensure t
   :config
   (setq auto-package-update-delete-old-versions t
	 auto-package-update-interval 4)
   (auto-package-update-maybe))

(use-package exec-path-from-shell :ensure t)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

(setq auth-sources '("~/.authinfo.gpg"))
;; ----------------------------------------------------------------------------

;;                                 BASIC SETTINGS

;; ----------------------------------------------------------------------------
(setq user-full-name "Daniel Posthuma")                ;; set user information
(setq user-mail-address "dnjp@posteo.org")
(setq create-lockfiles nil)                            ;; don't create lockfiles
(global-auto-revert-mode t)                            ;; automatically reload changed files
(setq backup-directory-alist                           ;; put backup files in /tmp
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq backup-by-copying t)                             ;; make backups by copying
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
(global-set-key (kbd "C-x k") 'kill-this-buffer)       ;; kill buffer right away
(setq gc-cons-threshold 50000000)                      ;; increase gc size to 50mb
(setq large-file-warning-threshold 100000000)          ;; increase large file size
(prefer-coding-system 'utf-8)                          ;; use utf-8
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(fset 'yes-or-no-p 'y-or-n-p)                          ;; y/n instead of yes/no
(add-hook 'before-save-hook 'whitespace-cleanup)       ;; always cleanup whitespace
(setq vc-follow-symlinks nil)                          ;; always follow symlinks
(delete-selection-mode 1)                              ;; always replace text when pasting
;; ----------------------------------------------------------------------------
;;                                     SHELL
;; ----------------------------------------------------------------------------
(global-set-key (kbd "C-c b") '(lambda ()  (interactive) (ansi-term "/bin/zsh")))
(add-hook 'sh-mode-hook '(lambda ()
  (setq sh-basic-offset 8)
  (setq tab-width 8)
  (setq indent-tabs-mode t)))

(add-hook 'comint-output-filter-functions
	  'comint-strip-ctrl-m)

;; (defun my-current-directory (text)
;;   (if (string-match "\\$ \\w*\\([^\n]+\\)" text)
;;       (setq cur-dir (substring text (match-beginning 1) (match-end 1)))
;;     (cd cur-dir)
;;     (message "dir tracking %s" cur-dir)))

;; (defun my-shell-setup ()
;;   "Track current directory"
;;   (add-hook 'comint-output-filter-functions 'my-current-directory nil t))

;; (setq shell-mode-hook 'my-shell-setup)

;; (defun track-shell-directory/procfs ()
;;   (shell-dirtrack-mode 0)
;;   (add-hook 'comint-preoutput-filter-functions
;;	    (lambda (str)
;;	      (prog1 str
;;		(when (string-match comint-prompt-regexp str)
;;		  (cd (file-symlink-p
;;		       (format "/proc/%s/cwd" (process-id
;;					       (get-buffer-process
;;						(current-buffer)))))))))
;;	    nil t))

;; (add-hook 'shell-mode-hook 'track-shell-directory/procfs)
(use-package native-complete
  :ensure t
  :config
  (native-complete-setup-bash))
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; (add-hook 'shell-mode-hook (setenv "TERM" "dumb"))
;; ----------------------------------------------------------------------------
;;                                 EMACS SERVER
;; ----------------------------------------------------------------------------
;; runs the Emacs server if it is not running
(require 'server)
(if (not (server-running-p)) (server-start))
;; ----------------------------------------------------------------------------

;;                                 VISUAL SETTINGS

;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------
;;                                     FONTS
;; ----------------------------------------------------------------------------
(set-face-attribute 'default nil :font "Fira Mono" :height 130 :weight 'Medium) ;; set font
(set-face-attribute 'fringe nil :background nil)       ;; fringe color
;; ----------------------------------------------------------------------------
;;                               SENSIBLE DEFAULTS
;; ----------------------------------------------------------------------------
(show-paren-mode)                                      ;; highlight matching parenthesis
(fringe-mode '(0 . 0))                                 ;; no fringe
(setq visible-bell t)                                  ;; no sound
(setq ring-bell-function 'ignore)
(setq-default line-spacing 0)                          ;; Line spacing, can be 0 for code and 1 or 2 for text
(setq x-underline-at-descent-line t)                   ;; Underline line at descent position, not baseline position
(setq widget-image-enable nil)                         ;; No ugly button for checkboxes
(tooltip-mode 0)                                       ;; No Tooltips
(setq initial-scratch-message "")                      ;; Don't use messages that you don't read
(setq inhibit-startup-message t)                       ;; don't show startup message
(setq inhibit-startup-screen t)                        ;; don't open to startup screen
(setq-default require-final-newline 't)
(setq column-number-mode t)                            ;; show column # in modeline
(setq size-indication-mode t)                          ;; show current file size
(setq vc-follow-symlinks nil)                          ;; always follow symlinks
(toggle-scroll-bar -1)                                 ;; turn off scrollbar
(tool-bar-mode -1)                                     ;; turn off tool bar
(when (eq window-system nil)                            ;; enable mouse in terminal
  (xterm-mouse-mode t))
;; ----------------------------------------------------------------------------
;;                                 THEME / COLORS
;; ----------------------------------------------------------------------------
(use-package minimal-theme :ensure t)
(load-theme 'minimal-light 't)
;; ----------------------------------------------------------------------------
;;                                 LINE WRAPPING
;; ----------------------------------------------------------------------------
;; In text mode, I don't want it auto-indenting for the first
;; line in the file, or lines following blank lines.
;; Everywhere else is okay.
(defun newline-and-text-indent ()
  "Insert a newline, then indent the next line sensibly for text"
  (interactive)
  (cond
   ;; Beginning of buffer, or beginning of an existing line, don't indent:
   ((or (bobp) (bolp)) (newline))
   ;; If we're on a whitespace-only line,
   ((and (eolp)
	 (save-excursion (re-search-backward "^\\(\\s \\)*$"
					     (line-beginning-position) t)))
    ;; ... delete the whitespace, then add another newline:
    (kill-line 0)
    (newline))
   ;; Else (not on whitespace-only) insert a newline,
   ;; then add the appropriate indent:
   (t (insert "\n")
      (indent-according-to-mode))))
(defun text-indent-hook ()
  (local-set-key "\C-m" 'newline-and-text-indent))
(setq text-mode-hook 'text-indent-hook)

(use-package visual-fill-column
  :ensure t)
(setq-default fill-column 80)
(add-hook 'text-mode-hook 'visual-line-mode)
(add-hook 'text-mode-hook 'visual-fill-column-mode)

;; C-M-- Global decrease text size
;; C-M-= Global increase text size
(use-package default-text-scale
  :ensure t
  :config
  (default-text-scale-mode))
;; ----------------------------------------------------------------------------

;;                                  SEARCHING

;; ----------------------------------------------------------------------------
(use-package rg :ensure t)                               ;; ripgrep
(use-package ido-vertical-mode :ensure t)                ;; vertical ido
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
;; ----------------------------------------------------------------------------
;;                                   TAGS
;; ----------------------------------------------------------------------------
;; https://www.emacswiki.org/emacs/EtagsTable
;; find tags file automatically by traversing up the tree
;; from the current file position
(require 'etags-table)
(setq tags-table-list '("~/work/martin-bidder/TAGS"
			"~/work/martin-bidder/go/TAGS"
			"~/work/martin-bidder/infra/terraform/TAGS"
			"~/personal/compete"
			"~/personal/C"
			"~/exercism"))
(setq etags-table-search-up-depth 99)

(defun ido-select-tags-file ()
  "selects the active tags file"
  (interactive)
  (visit-tags-table
   (ido-completing-read "Select from list: " tags-table-list)))

(defun ido-find-file-in-tag-files ()
  "find files in active tags file"
  (interactive)
  (save-excursion
    (let ((enable-recursive-minibuffers t))
      (visit-tags-table-buffer tags-file-name))
    (find-file
     (expand-file-name
      (ido-completing-read
       "Project file: " (tags-table-files) nil t)))))

(setq path-to-ctags "/opt/homebrew/bin/ctags")
(defun create-tags (dir-name)
  "Create tags file."
  (interactive "Directory: ")
  (shell-command
   (format "%s -f TAGS -e -R %s" path-to-ctags (directory-file-name dir-name))))

(defun er-refresh-etags (&optional extension)
  "Run etags on all peer files in current dir and reload them silently."
  (interactive)
  (shell-command (format "etags *.%s" (or extension "el")))
  (let ((tags-revert-without-query t))  ; don't query, revert silently
    (visit-tags-table default-directory nil)))

(defadvice find-tag (around refresh-etags activate)
  "Rerun etags and reload tags if tag not found and redo find-tag.
   If buffer is modified, ask about save before running etags."
  (let ((extension (file-name-extension (buffer-file-name))))
    (condition-case err
	ad-do-it
      (error (and (buffer-modified-p)
		  (not (ding))
		  (y-or-n-p "Buffer is modified, save it? ")
		  (save-buffer))
	     (er-refresh-etags extension)
	     ad-do-it))))

;; use tags for completion
(defun indent-or-complete ()
  (interactive)
  (if (looking-at "\\_>")
      (company-complete-common)
    (indent-according-to-mode)))

(use-package company
  :ensure t
  :config
  (global-company-mode)
  (global-set-key (kbd "TAB") #'company-indent-or-complete-common))

;; https://github.com/redguardtoo/company-ctags
(use-package company-ctags
  :ensure t
  :config
  (company-ctags-auto-setup))
;; ----------------------------------------------------------------------------

;;                                   GIT

;; ----------------------------------------------------------------------------
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "M-G") 'magit))

(with-eval-after-load 'magit
  (magit-add-section-hook 'magit-status-sections-hook 'forge-insert-assigned-issues   nil t)
  (magit-add-section-hook 'magit-status-sections-hook 'forge-insert-assigned-pullreqs   nil t))

(use-package forge
  :ensure t
  :after magit
  :init
  (setq forge-topic-list-limit '(100 . 0))
  (setq forge-topic-list-columns
	'(("#" 5 forge-topic-list-sort-by-number (:right-align t) number nil)
	  ("Title" 35 t nil title  nil)
	  ("State" 4 t nil state nil))))
;; ----------------------------------------------------------------------------

;;                                 KEYBOARD

;; ----------------------------------------------------------------------------
(use-package ace-window
  :ensure t
  :config
  (global-set-key (kbd "M-o") 'ace-window))
(global-set-key (kbd "C-S-f") 'ido-find-file-in-tag-files) ;; tag based search
(global-set-key (kbd "C-S-p") 'ido-select-tags-file) ;; tag based search
(global-set-key (kbd "C-c C-b") 'ibuffer) ;; buffer management
;; ----------------------------------------------------------------------------

;;                             LANGUAGE SETTINGS

;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------
;;                                    GO
;; ----------------------------------------------------------------------------
(use-package go-mode :ensure t)
(add-hook 'before-save-hook 'gofmt-before-save)
;; ----------------------------------------------------------------------------
;;                                 PROTOBUF
;; ----------------------------------------------------------------------------
(use-package protobuf-mode :ensure t)
;; ----------------------------------------------------------------------------
;;                                 TERRAFORM
;; ----------------------------------------------------------------------------
(use-package terraform-mode
  :ensure t
  :init
  (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode)
  (add-hook 'terraform-mode-hook
	    '(lambda ()
	       (setq indent-tabs-mode nil)
	       (setq tab-width 2))))
;; ----------------------------------------------------------------------------
;;                                   YAML
;; ----------------------------------------------------------------------------
(use-package yaml-mode :ensure t)
;; ----------------------------------------------------------------------------
;;                                   MARKDOWN
;; ----------------------------------------------------------------------------
(use-package markdown-mode :ensure t)
(add-hook 'text-mode-hook
  '(lambda ()
     (setq indent-tabs-mode nil)
     (setq tab-width 2)
     (setq indent-line-function (quote insert-tab))))
;; ----------------------------------------------------------------------------
;;                                   JAVA
;; ----------------------------------------------------------------------------
(add-hook 'java-mode-hook (lambda ()
			    (setq c-basic-offset 2
				  tab-width 2
				  indent-tabs-mode nil)))
;; ----------------------------------------------------------------------------
;;                                     C++
;; ----------------------------------------------------------------------------
(add-to-list 'auto-mode-alist '("\\.\\(cc\\|cpp\\|hpp\\|hh\\|cxx\\|c++\\|hxx\\)\\'" . c++-mode))
(add-hook 'c++-mode-hook (lambda()
			       (setq c-basic-offset 2)
			       (setq tab-width 2)
			       (setq indent-tabs-mode f)))
;; ----------------------------------------------------------------------------
;;                                      C
;; ----------------------------------------------------------------------------
(add-to-list 'auto-mode-alist '("\\.\\(c\\|h\\)\\'" . c-mode))
(add-hook 'c-mode-hook (lambda ()
			 (setq c-basic-offset 8)
			 (setq tab-width 8)
			 (setq indent-tabs-mode t)))
;; ----------------------------------------------------------------------------
;;                                    HOON
;; ----------------------------------------------------------------------------
(add-hook 'hoon-mode
	  (lambda ()
	    (define-key hoon-mode-map (kbd "C-c r") 'hoon-eval-region-in-herb)
	    (define-key hoon-mode-map (kbd "C-c b") 'hoon-eval-buffer-in-herb)))
;; ----------------------------------------------------------------------------
;;                                    LISP
;; ----------------------------------------------------------------------------
;; (use-package slime
;;   :ensure t
;;   :init
;;   (load (expand-file-name "~/quicklisp/slime-helper.el"))
;;   :config
;;   (setq slime-lisp-implementations
;;	'((sbcl  ("/opt/homebrew/bin/sbcl" "--dynamic-space-size" "2GB") :coding-system utf-8-unix)))
;;   (setq inferior-lisp-program "sbcl"))
(add-to-list 'load-path "~/tmp/slime")
(require 'slime-autoloads)
(setq inferior-lisp-program "/opt/homebrew/bin/sbcl")
;; (use-package paredit
;;   :ensure t
;;   :config
;;     (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
;;     (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
;;     (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
;;     (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
;;     (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
;;     (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
;;     (add-hook 'scheme-mode-hook           #'enable-paredit-mode))

;; (use-package parinfer-rust-mode
;;   :ensure t
;;   :hook emacs-lisp-mode
;;   :hook lisp-mode
;;   :hook lisp-interaction-mode
;;   :hook ielm-mode
;;   :hook scheme-mode
;;   :init
;;   (setq parinfer-rust-auto-download t))


;; ----------------------------------------------------------------------------


;;                                    TOOLS


;; ----------------------------------------------------------------------------
;;                                     SQL
;; ----------------------------------------------------------------------------
(use-package sql :ensure t)
;; ----------------------------------------------------------------------------
;;                                  EXERCISM
;; ----------------------------------------------------------------------------
(use-package request :ensure t)
(setq exercism-config-file (expand-file-name "~/.config/exercism/user.json"))
(setq exercism-dir (expand-file-name "~/Exercism"))
(setq exercism-auto-enable nil)
(load (expand-file-name "~/.emacs.d/plugins/exercism-emacs/exercism.el"))
;; ----------------------------------------------------------------------------

;;                                PRODUCTIVITY

;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------
;;                           RECENTLY OPENED FILES
;; ----------------------------------------------------------------------------
;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)

;; enable recent files mode.
(recentf-mode t)

; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))

(defun create-scratch-buffer nil
  "create a scratch buffer"
  (interactive)
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode))

;; ----------------------------------------------------------------------------

;;                                     ORG

;; ----------------------------------------------------------------------------
(use-package org
  :ensure t
  :config
  (setq org-directory "~/Nextcloud/Org")
  (setq org-agenda-files (list "~/Nextcloud/Org/notes.org"))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (add-hook 'text-mode-hook #'auto-fill-mode)
  (setq org-log-done t))
;; ----------------------------------------------------------------------------

;;                                     END

;; ----------------------------------------------------------------------------

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#f8f8f8" "#ab4642" "#a1b56c" "#f7ca88" "#7cafc2" "#ba8baf" "#7cafc2" "#383838"])
 '(custom-safe-themes
   '("cfb7f51dcfd7a42080fce44babd015f6148524427dea0d27935876880105a391" "64e3f7a494ad5491dea52e49253ee807be7799a4758822725fe29682abfe0cf7" "d96587ec2c7bf278269b8ec2b800c7d9af9e22d816827639b332b0e613314dfd" "cbd85ab34afb47003fa7f814a462c24affb1de81ebf172b78cb4e65186ba59d2" "77b9cad4f0e64f7267acc55181d5c1999627b16f9d6424ed57420a39134e66e7" "3e335d794ed3030fefd0dbd7ff2d3555e29481fe4bbb0106ea11c660d6001767" "16dd114a84d0aeccc5ad6fd64752a11ea2e841e3853234f19dc02a7b91f5d661" default))
 '(debug-on-error t)
 '(electric-indent-mode nil)
 '(ns-command-modifier 'meta)
 '(package-selected-packages
   '(parinfer-rust-mode acme-theme paredit native-complete slime default-text-scale xterm-color almost-mono-themes hydandata-light-theme ace-window forge base16-theme minimal-theme discover multi-term exec-path-from-shell company auctex markdown-mode yaml-mode protobuf-mode go-mode ido-vertical-mode rg magit visual-fill-column auto-package-update use-package)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
