"	       	     NOTES
"
"             Special Characters
"                7c - pipe 
"                   - space
"                   - ctrl+r
"
"                Mapping Rules
"  map ctrl+p   ... reserved for fzf
"  map g        ... reserved for git, except for gg
"  map <space>m ... reserved for make
"  map <space>g ... reserved for go
"  map <space>r ... reserved for rust
"  map <space>c ... reserved for ctags
"  map <space>t ... reserved for terraform
"  map <space>f ... reserved for general formatting
"
"                   Marks
"            'm' - starting mark
"            'a' - ending mark
"
"                    Tags
"   Use ^] to jump to tag under cursor
"   Use g^] for ambiguous tags
"   Use ^t to jump back up the tag sta
"   ^x^n for JUST this file
"   ^x^f for filenames (works with our path trick!)
"   ^x^] for tags only
"   ^n for anything specified by the 'complete' option
"   Use ^n and ^p to go back and forth in the suggestion list
"
"                   TODO
"   - check out fzf plugin - github.com/junegunn/fzf.vim
"   - check out tmux plugin - github.com/christoomey/vim-tmux-navigator
"
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   defaults
"""""""""""""""""""""""""""""""""""""""""""""""""""
set shell=/bin/bash
set path+=**
set nocompatible				" don't try to be like traditional vi
set cedit=					" ctrl-r to view command edit
set rtp+=~/cfg/sources/github.com/junegunn/fzf
set backupdir=~/.vim/.backup//
function! InitBackupDir()                       " automatically create backup directory
	if !isdirectory(&backupdir)
		call mkdir(&backupdir)
	endif
endfunction
call InitBackupDir()
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                     tags
"""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=tags
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                     indentation
"""""""""""""""""""""""""""""""""""""""""""""""""""
set noexpandtab					" use hard tabs by default
set tabstop=8 					" set tab to equal 8 spaces
set shiftwidth=8
set wrapmargin=8 				" set margin
set backspace=indent,eol,start			" inteligent backspace behavior
set autoindent					" auto indentation based on last line
set smartindent					" indentation based on syntax
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   searching
"""""""""""""""""""""""""""""""""""""""""""""""""""
set smartcase					" do the right thing when searching
set wildmenu					" better menu in command mode
set wildmode=longest,list
"""""""""""""""""""""""""""""""""""
"        general settings
"""""""""""""""""""""""""""""""""""
set noswapfile					" don't create swap files
set noerrorbells				" turn off alerts
set shortmess=I 				" turn off splash screen
set autoread					" always refresh file
set hidden					" hides buffers instead of closing them
set autoread                                    " reload buffer in vim when file changes on disk
"""""""""""""""""""""""""""""""""""
"        searching
"""""""""""""""""""""""""""""""""""
set ignorecase					" ignore case when searching
set incsearch					" start searching right away when typing
set nohlsearch 					" don't highlight search terms
set wildmenu					" display matching files when tab complete
"""""""""""""""""""""""""""""""""""
"            navigation
"""""""""""""""""""""""""""""""""""
" easily switch buffers with space+l
nnoremap  l :b #
" make ctrl-w behave like nvi
map  
"""""""""""""""""""""""""""""""""""""""""""""""""""
"           install dependencies
"""""""""""""""""""""""""""""""""""""""""""""""""""
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('~/.vim/plugged')
	Plug 'prabirshrestha/vim-lsp'
	Plug 'mattn/vim-lsp-settings' 
	Plug 'junegunn/fzf.vim'
	Plug 'vim-latex/vim-latex'
call plug#end()
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   lsp
"""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gd <plug>(lsp-definition)
	nmap <buffer> K <plug>(lsp-hover) " scrolling in popup window
	let g:lsp_format_sync_timeout = 1000
	autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction
augroup lsp_install
	au!
	" call s:on_lsp_buffer_enabled only for languages that has the server registered.
	autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" disable highlight references to symbol under cursor
let g:lsp_document_highlight_enabled = 0

" disable support for document code action hints for |signs|.
let g:lsp_document_code_action_signs_enabled = 0

" let g:lsp_completion_documentation_enabled = 0

" turn off diagnostic support
let g:lsp_diagnostics_enabled = 0

" automatically insalled servers go here
let g:lsp_settings_servers_dir = '/home/daniel/.local/share/vim-lsp-settings/servers'

let g:lsp_settings = {
\  'clangd': {'disabled': v:false},
\  'gopls': {'disabled': v:false},
\  'eclipse-jdt-ls': {'disabled': v:false},
\}
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                      FZF
"""""""""""""""""""""""""""""""""""""""""""""""""""
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" use ripgrep to search for pattern with preview
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

map  :Buffers
map  :Files
map  / :RG
"""""""""""""""""""""""""""""""""""
"             convenience
"""""""""""""""""""""""""""""""""""
map gg 1G
map Q :q!
map S :w
map X :!
map ; :
map ve :sp:e ~/.vimrc
" map    :w:suspend
map  ct :!ctags -R .
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   text manipulation
"""""""""""""""""""""""""""""""""""""""""""""""""""
" replace between marks
map R :'m,'a s/
" ctrl-/ to comment/uncomment lines
map  :.!com -f %
" space-ctrl-/ to un/comment current selection
map   :'<,'>!com -f % 
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   formatting
"""""""""""""""""""""""""""""""""""""""""""""""""""
" detect filetypes 
filetype on 
" expand tabs to spaces
map te :set expandtab
" format document using fmt
map  fF :%!fmt -s
" prettier
map  fP :%!prettier --print-width 80 --prose-wrap always %
" remove trailing spaces
map  fs :%s/[[:space:]]\{1,\}/
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""
" display vi buffers
" map K :display buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   clipboard
"""""""""""""""""""""""""""""""""""""""""""""""""""
set clipboard=unnamedplus
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                      git
"""""""""""""""""""""""""""""""""""""""""""""""""""
" git search for word under cursor
map g/ wb"zye::o:!git grep "zp
map gs :!git status >/tmp/statout:sp:e /tmp/statout
map ga :!git add 
map gA :!git add -A
map gc :!git commit -am '
map gC :!git checkout -b 
map gP :!git push
map gp :!git pull
map gb :sp"zy1G:edit /tmp/blamefile"zp:.,$!wc -l"zyy:.,$!git blame -- #:o"zpI:
map gB :!git checkout 
map gl :!git log
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   Rust
"""""""""""""""""""""""""""""""""""""""""""""""""""
map  gr :%rustfmt
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                    Go
"""""""""""""""""""""""""""""""""""""""""""""""""""
map  gf :%!gofmt
map  gd :!go doc 
map  gt :!cd $(dirname %) && go test -race -bench Benchmark* -count=1 >/tmp/testout 2>&1:sp /tmp/testout
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   Make
"""""""""""""""""""""""""""""""""""""""""""""""""""
map  m :!make 
map  M :!make >/tmp/makeout 2>&1:sp /tmp/makeout
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                 Terraform
"""""""""""""""""""""""""""""""""""""""""""""""""""
map  tv :!terraform validate
map  tp :!terraform plan
map  ta :!terraform apply
map  tf :w:!terraform fmt:e!
"""""""""""""""""""""""""""""""""""""""""""""""""""
"             Filetype Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufRead,BufNewFile *.py setlocal filetype=python
au filetype python set shiftwidth=4 tabstop=4 expandtab

autocmd BufRead,BufNewFile *.c,*.h setlocal filetype=c
au filetype c set shiftwidth=8 tabstop=8 

autocmd BufRead,BufNewFile *.cc,*.hh,*.cpp,*.hpp setlocal filetype=cpp
au filetype cpp set shiftwidth=4 tabstop=4 expandtab

autocmd BufRead,BufNewFile *.go setlocal filetype=go
au filetype go set shiftwidth=8 tabstop=8 

autocmd BufRead,BufNewFile *.js,*.ts setlocal filetype=javascript
au filetype javascript set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.java setlocal filetype=java
au filetype java set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.json setlocal filetype=json
au filetype json set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.yaml,*.yml setlocal filetype=yaml
au filetype yaml set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.md setlocal filetype=markdown
au filetype markdown set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.proto setlocal filetype=protobuf
au filetype protobuf set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.tf setlocal filetype=terraform
au filetype terraform set shiftwidth=2 tabstop=2 expandtab

let g:tex_flavor='latex'
autocmd BufRead,BufNewFile *.tex setlocal filetype=tex
au filetype tex set shiftwidth=2 tabstop=2 expandtab iskeyword+=:
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                     visuals
"""""""""""""""""""""""""""""""""""""""""""""""""""
syntax off					" turn off syntax highlighting
set nonumber 					" turn off line numbers
set showmode 					" show '-- INSERT --'
set noruler					" turn off position information
set report=0					" don't show messages like '4 lines yanked'
set laststatus=0				" disable status line
set pumheight=10                                " Completion window max size
set background=dark                             " tell vim to have a background
let loaded_matchparen = 1                       " don't highlight matching delims
set showmatch 					" jump to matching delim when typing
set matchtime=2 				" duration (1/10s) for showing matching delim

" Set split separator to Unicode box drawing character
set encoding=utf8
set fillchars+=vert:\ 
highlight VertSplit cterm=NONE

" set omni completion menu to more sensible color
highlight Pmenu ctermbg=gray guibg=gray
highlight PmenuSel ctermbg=white guibg=white

" turn off color
" set t_Co=0
