"""""""""""""""""""""""""""""""""""""""""""""""""""
"
"                      defaults
"
"""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible				" don't try to be like traditional vi
set shell=/bin/zsh
set path+=**
set rtp+=~/cfg/sources/github.com/junegunn/fzf
set backupdir=~/.vim/.backup//

" leader keys
let mapleader = " "
let maplocalleader = "\\"

" automatically create backup directory
function! InitBackupDir()                       
	if !isdirectory(&backupdir)
		call mkdir(&backupdir)
	endif
endfunction
call InitBackupDir()

" Allow us to use Ctrl-s and Ctrl-q as keybinds
silent !stty -ixon
" " Restore default behaviour when leaving Vim.
autocmd VimLeave * silent !stty ixon
" tell vim about python
let g:python3_host_prog='/opt/homebrew/bin/python3'
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                        tags
"""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=tags
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                     indentation
"""""""""""""""""""""""""""""""""""""""""""""""""""
set noexpandtab					" use hard tabs by default
set tabstop=8 					" set tab to equal 8 spaces
set shiftwidth=8
set wrapmargin=8 				" set margin
set backspace=indent,eol,start			" inteligent backspace behavior
set autoindent					" auto indentation based on last line
set smartindent					" indentation based on syntax
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   searching
"""""""""""""""""""""""""""""""""""""""""""""""""""
set smartcase					" do the right thing when searching
set wildmenu					" better menu in command mode
set wildmode=longest,list
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                general settings
"""""""""""""""""""""""""""""""""""""""""""""""""""
set noswapfile					" don't create swap files
set noerrorbells				" turn off alerts
set shortmess=aoOtI				" turn off splash screen, press <Enter>, etc
set hidden					" hides buffers instead of closing them
set autoread                                    " reload buffer in vim when file changes on disk
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                  searching
"""""""""""""""""""""""""""""""""""""""""""""""""""
set ignorecase					" ignore case when searching
set incsearch					" start searching right away when typing
set hlsearch 					" highlight search results
set wildmenu					" display matching files when tab complete
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                 navigation
"""""""""""""""""""""""""""""""""""""""""""""""""""
" easily switch buffers with space+l
nnoremap <leader>l :b #<Enter>
" use mouse
if !has('nvim')
	set ttymouse=xterm2
endif
set mouse=a
"""""""""""""""""""""""""""""""""""""""""""""""""""
"           install dependencies
"""""""""""""""""""""""""""""""""""""""""""""""""""
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('~/.vim/plugged')
	" Language Server Protocol
	Plug 'prabirshrestha/vim-lsp'
	Plug 'mattn/vim-lsp-settings' 
	"Languages
	Plug 'sheerun/vim-polyglot'
	" Go
	Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
	Plug 'buoto/gotests-vim'
	" Terraform
	Plug 'hashivim/vim-terraform'
	" Lisp
	Plug 'vlime/vlime', {'rtp': 'vim/'}
	Plug 'vim-scripts/paredit.vim'
	" Searching
	Plug 'junegunn/fzf.vim'
	" Editing Operations
	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-dispatch'
	" Formatting
	Plug 'rhysd/vim-clang-format'
	" Git
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-rhubarb'
	Plug 'airblade/vim-gitgutter'
	" Navigation
	Plug 'nanotee/zoxide.vim'
	" Colors
	Plug 'chriskempson/base16-vim'
call plug#end()
"""""""""""""""""""""""""""""""""""""""""""""""""""
"
"                      LSP
"
"""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	
	" lsp mappings
	nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
	nmap <buffer> gr <plug>(lsp-references)
	nmap <buffer> <leader>rn <plug>(lsp-rename)
	nmap <buffer> K <plug>(lsp-hover) " scrolling in popup window
  inoremap <buffer> <expr><c-f> lsp#scroll(+4)
  inoremap <buffer> <expr><c-d> lsp#scroll(-4)

	let g:lsp_format_sync_timeout = 1000
	autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction
augroup lsp_install
	au!
	" call s:on_lsp_buffer_enabled only for languages that has the server registered.
	autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_diagnostics_echo_cursor = 1

let g:lsp_settings = {
\  'clangd': {'disabled': v:false},
\  'gopls': {'disabled': v:false},
\  'eclipse-jdt-ls': {'disabled': v:false},
\}
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                    Searching
"""""""""""""""""""""""""""""""""""""""""""""""""""
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" use ripgrep to search for pattern with preview
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

map <C-l> :Buffers<Enter>
map <C-p> :Files<Enter>
map <C-S> :RG<Enter>
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   convenience
"""""""""""""""""""""""""""""""""""""""""""""""""""
map gg 1G
map Q :q!<Enter>
map S :w<Enter>
map X :!
map ; :
map <leader>ve :sp<Enter>:e ~/.vimrc<Enter>
map <leader><leader> :suspend<Enter>
map <leader>ct :!ctags -R .<Enter>
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                text manipulation
"""""""""""""""""""""""""""""""""""""""""""""""""""
" un/comment lines
map <C-\> <Plug>Commentary
"""""""""""""""""""""""""""""""""""""""""""""""""""
"
"                   formatting
"
"""""""""""""""""""""""""""""""""""""""""""""""""""
" detect filetypes 
filetype on 
" expand tabs to spaces
map te :set expandtab<Enter>
" format document using fmt
map <leader>fF :%!fmt -s<Enter>
" prettier
map <leader>fP :%!prettier --print-width 80 --prose-wrap always %<Enter>
" remove trailing spaces
map <leader>fs :%s/[[:space:]]\{1,\}/
"""""""""""""""""""""""""""""""""""""""""""""""""""
"
"                    terminal
"
"""""""""""""""""""""""""""""""""""""""""""""""""""
" get to command mode
tnoremap <C-\> <C-\><C-n>
"""""""""""""""""""""""""""""""""""""""""""""""""""
"
"                   navigation
"
"""""""""""""""""""""""""""""""""""""""""""""""""""
" zoxide
map Z :Z 
" interactive
map <leader>Z :Zi 
"""""""""""""""""""""""""""""""""""""""""""""""""""
"
"                      git
"
"""""""""""""""""""""""""""""""""""""""""""""""""""
" Menus
"   Status 
map <LocalLeader>gs :Git<Enter>
map <LocalLeader>gc :Git commit -am '
map <LocalLeader>gp :Dispatch! Git push<Enter>
map <LocalLeader>gf :Git pull<Enter>
map <LocalLeader>gb :Git checkout -b 
map <LocalLeader>gB :Git blame<Enter>
map <LocalLeader>gl :Git log<Enter>
if has('nvim')
	map <LocalLeader>gr :term gh pr create<Enter>
	let $GIT_EDITOR = 'nvr -cc split --remote-wait'
endif

" diffing
nmap <leader>dh :diffget //3<Enter>
nmap <leader>du :diffget //2<Enter>
" git gutter
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'
let g:gitgutter_override_sign_column_highlight = 1
"""""""""""""""""""""""""""""""""""""""""""""""""""
"
"                 Languages
"
"""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                    Go
"""""""""""""""""""""""""""""""""""""""""""""""""""
let g:gotests_bin = '/Users/daniel/go/bin/gotests'
au filetype go set shiftwidth=2 tabstop=2 
" manually format document
map <leader>gf :GoFmt<Enter>
" show documentation under cursor
map <leader>gd :GoDoc<Enter>
" run tests
map <leader>gt :GoTest<Enter>
" generate tests
map <leader>gg :GoTests<Enter>
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                    C
"""""""""""""""""""""""""""""""""""""""""""""""""""
au filetype c set shiftwidth=8 tabstop=8 
au filetype cpp set shiftwidth=2 tabstop=2 expandtab
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                 Protobuf
"""""""""""""""""""""""""""""""""""""""""""""""""""
au filetype proto set shiftwidth=4 tabstop=4 
au filetype proto ClangFormatAutoEnable
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                  Latex
"""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tex_flavor='latex'
autocmd BufRead,BufNewFile *.tex setlocal filetype=tex
au filetype tex set shiftwidth=2 tabstop=2 expandtab iskeyword+=:
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   Make
"""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>m :Dispatch make 
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                 Terraform
"""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>tv :Dispatch! terraform validate<Enter>
map <leader>tp :Dispatch! terraform plan<Enter>
map <leader>tf :w<Enter>:!terraform fmt<Enter>:e!<Enter>
let g:terraform_fmt_on_save=1
let g:lsp_settings_filetype_terraform = ['terraform-ls']
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   Lisp
"""""""""""""""""""""""""""""""""""""""""""""""""""
" <LocalLeader>rr - start server
" <LocalLeader>cc - connect to server
" <LocalLeader>cs - list connections to server
" <LocalLeader>cd - disconnect from server
" <LocalLeader>ss - send s-expression to server
" <LocalLeader>i - enable/disable interactive mode. <CR> to send expression.
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                     
"                     visuals
"
"""""""""""""""""""""""""""""""""""""""""""""""""""
set number 					" turn on line numbers
set showmode 					" show '-- INSERT --'
set noruler					" turn off position information
set report=0					" don't show messages like '4 lines yanked'
set laststatus=0				" disable status line
set pumheight=10                                " Completion window max size
let loaded_matchparen = 1                       " don't highlight matching delims
set showmatch 					" jump to matching delim when typing
set matchtime=2 				" duration (1/10s) for showing matching delim
set scl=yes                                     " turn on sign column

" use modern colors
syntax on					
set background=dark

" use base16 shell colors or the defined colorscheme
if filereadable(expand("~/.vimrc_background"))
	let base16colorspace=256
	source ~/.vimrc_background
else
	colorscheme base16-default-dark
endif

" use default background for SignColumn / Git Gutter background
highlight SignColumn guibg=bg ctermbg=bg
highlight GitGutterAdd guibg=bg ctermbg=bg
highlight GitGutterChange guibg=bg ctermbg=bg
highlight GitGutterDelete guibg=bg ctermbg=bg
highlight GitGutterChangeDelete guibg=bg ctermbg=bg

" line number background color
highlight LineNr guibg=bg ctermbg=bg

" Set split separator to simple dotted line
set encoding=utf8

" folding
set foldmethod=syntax
set foldnestmax=1
" zo - open fold
" zc - close fold
" zR - open all folds
" zm - fold one level down
set nofoldenable " don't fold by default
