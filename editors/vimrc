"	       	     NOTES
"
"                Mapping Rules
"  map ctrl+p   ... reserved for fzf
"  map g        ... reserved for git, except for gg
"  map <space>m ... reserved for make
"  map <space>g ... reserved for go
"  map <space>r ... reserved for rust
"  map <space>c ... reserved for ctags
"  map <space>t ... reserved for terraform
"  map <space>f ... reserved for general formatting
"
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   defaults
"""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible				" don't try to be like traditional vi
set shell=/bin/zsh
set path+=**
set rtp+=~/cfg/sources/github.com/junegunn/fzf
set backupdir=~/.vim/.backup//
function! InitBackupDir()                       " automatically create backup directory
	if !isdirectory(&backupdir)
		call mkdir(&backupdir)
	endif
endfunction
call InitBackupDir()
" Allow us to use Ctrl-s and Ctrl-q as keybinds
silent !stty -ixon
" " Restore default behaviour when leaving Vim.
autocmd VimLeave * silent !stty ixon
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                     tags
"""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=tags
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                     indentation
"""""""""""""""""""""""""""""""""""""""""""""""""""
set noexpandtab					" use hard tabs by default
set tabstop=8 					" set tab to equal 8 spaces
set shiftwidth=8
set wrapmargin=8 				" set margin
set backspace=indent,eol,start			" inteligent backspace behavior
set autoindent					" auto indentation based on last line
set smartindent					" indentation based on syntax
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   searching
"""""""""""""""""""""""""""""""""""""""""""""""""""
set smartcase					" do the right thing when searching
set wildmenu					" better menu in command mode
set wildmode=longest,list
"""""""""""""""""""""""""""""""""""
"        general settings
"""""""""""""""""""""""""""""""""""
set noswapfile					" don't create swap files
set noerrorbells				" turn off alerts
set shortmess=I 				" turn off splash screen
set hidden					" hides buffers instead of closing them
set autoread                                    " reload buffer in vim when file changes on disk
"""""""""""""""""""""""""""""""""""
"        searching
"""""""""""""""""""""""""""""""""""
set ignorecase					" ignore case when searching
set incsearch					" start searching right away when typing
set hlsearch 					" highlight search results
set wildmenu					" display matching files when tab complete
"""""""""""""""""""""""""""""""""""
"            navigation
"""""""""""""""""""""""""""""""""""
" easily switch buffers with space+l
nnoremap <Space>l :b #<Enter>
" make ctrl-w behave like nvi
map <C-w> <C-w><C-w>
" use mouse
set ttymouse=xterm2
set mouse=a
"""""""""""""""""""""""""""""""""""""""""""""""""""
"           install dependencies
"""""""""""""""""""""""""""""""""""""""""""""""""""
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('~/.vim/plugged')
	" Language Server Protocol
	Plug 'prabirshrestha/vim-lsp'
	Plug 'mattn/vim-lsp-settings' 
	" Go
	Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
	" Searching
	Plug 'junegunn/fzf.vim'
	" Editing Operations
	Plug 'tpope/vim-commentary'
	" Git
	Plug 'tpope/vim-fugitive'
	Plug 'idanarye/vim-merginal'
	" Build Systems
	Plug 'vhdirk/vim-cmake'
call plug#end()
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   lsp
"""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gd <plug>(lsp-definition)
	nmap <buffer> K <plug>(lsp-hover) " scrolling in popup window
	let g:lsp_format_sync_timeout = 1000
	autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction
augroup lsp_install
	au!
	" call s:on_lsp_buffer_enabled only for languages that has the server registered.
	autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" disable highlight references to symbol under cursor
let g:lsp_document_highlight_enabled = 0

" disable support for document code action hints for |signs|.
let g:lsp_document_code_action_signs_enabled = 0

" let g:lsp_completion_documentation_enabled = 0

" turn off diagnostic support
let g:lsp_diagnostics_enabled = 0

" automatically insalled servers go here
" let g:lsp_settings_servers_dir = '/Users/daniel/.local/share/vim-lsp-settings/servers'

let g:lsp_settings = {
\  'clangd': {'disabled': v:false},
\  'gopls': {'disabled': v:false},
\  'eclipse-jdt-ls': {'disabled': v:false},
\}
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                Searching
"""""""""""""""""""""""""""""""""""""""""""""""""""
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" use ripgrep to search for pattern with preview
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

map <C-l> :Buffers<Enter>
map <C-p> :Files<Enter>
map <C-S> :RG<Enter>
"""""""""""""""""""""""""""""""""""
"             convenience
"""""""""""""""""""""""""""""""""""
map gg 1G
map Q :q!<Enter>
map S :w<Enter>
map X :!
map ; :
map ve :sp<Enter>:e ~/.vimrc<Enter>
map <Space><Space> :suspend<Enter>
map <Space>ct :!ctags -R .<Enter>
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   text manipulation
"""""""""""""""""""""""""""""""""""""""""""""""""""
" un/comment lines
map <C-\> <Plug>Commentary
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   formatting
"""""""""""""""""""""""""""""""""""""""""""""""""""
" detect filetypes 
filetype on 
" expand tabs to spaces
map te :set expandtab<Enter>
" format document using fmt
map <Space>fF :%!fmt -s<Enter>
" prettier
map <Space>fP :%!prettier --print-width 80 --prose-wrap always %<Enter>
" remove trailing spaces
map <Space>fs :%s/[[:space:]]\{1,\}/
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                      git
"""""""""""""""""""""""""""""""""""""""""""""""""""
" git search for word under cursor
map gs :G<Enter>
map ga :Git add 
map gA :Git add -A<Enter>
map gc :Git commit
map gC :Git checkout -b 
map gP :Git push<Enter>
map gp :Git pull<Enter>
map gb :Git blame<Enter>
map gB :Git checkout 
map gl :Git log<Enter>
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   Rust
"""""""""""""""""""""""""""""""""""""""""""""""""""
map <Space>gr :%rustfmt<Enter>
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                    Go
"""""""""""""""""""""""""""""""""""""""""""""""""""
map <Space>gf :GoFmt<Enter>
map <Space>gd :GoDoc
map <Space>gt :GoTest<Enter>
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                   Make
"""""""""""""""""""""""""""""""""""""""""""""""""""
map <Space>m :!make 
map <Space>M :!make >/tmp/makeout 2>&1<Enter>:sp /tmp/makeout<Enter><Enter><Enter>
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                 Terraform
"""""""""""""""""""""""""""""""""""""""""""""""""""
map <Space>tv :!terraform validate<Enter>
map <Space>tp :!terraform plan<Enter>
map <Space>ta :!terraform apply<Enter>
map <Space>tf :w<Enter>:!terraform fmt<Enter>:e!<Enter>
"""""""""""""""""""""""""""""""""""""""""""""""""""
"             Filetype Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufRead,BufNewFile *.py setlocal filetype=python
au filetype python set shiftwidth=4 tabstop=4 expandtab

autocmd BufRead,BufNewFile *.c,*.h setlocal filetype=c
au filetype c set shiftwidth=8 tabstop=8 

autocmd BufRead,BufNewFile *.cc,*.hh,*.cpp,*.hpp setlocal filetype=cpp
au filetype cpp set shiftwidth=4 tabstop=4 expandtab

autocmd BufRead,BufNewFile *.go setlocal filetype=go
au filetype go set shiftwidth=8 tabstop=8 

autocmd BufRead,BufNewFile *.js,*.ts setlocal filetype=javascript
au filetype javascript set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.java setlocal filetype=java
au filetype java set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.json setlocal filetype=json
au filetype json set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.yaml,*.yml setlocal filetype=yaml
au filetype yaml set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.md setlocal filetype=markdown
augroup Markdown
	autocmd!
		" autocmd FileType markdown set wrap
		autocmd FileType markdown set wrap linebreak nolist nonumber
		autocmd FileType markdown set shiftwidth=2 tabstop=2 expandtab textwidth=80
		autocmd FileType markdown set fo+=t
		autocmd FileType markdown set tw=80 fo=cqt wm=0
		autocmd FileType markdown map j gj
		autocmd FileType markdown map k gk
		autocmd FileType markdown set columns=80
		autocmd VimResized * if (&columns > 80) | set columns=80 | endif
augroup END

autocmd BufRead,BufNewFile *.proto setlocal filetype=protobuf
au filetype protobuf set shiftwidth=2 tabstop=2 expandtab

autocmd BufRead,BufNewFile *.tf setlocal filetype=terraform
au filetype terraform set shiftwidth=2 tabstop=2 expandtab

let g:tex_flavor='latex'
autocmd BufRead,BufNewFile *.tex setlocal filetype=tex
au filetype tex set shiftwidth=2 tabstop=2 expandtab iskeyword+=:
"""""""""""""""""""""""""""""""""""""""""""""""""""
"                     visuals
"""""""""""""""""""""""""""""""""""""""""""""""""""
" set nonumber 					" turn off line numbers
set number 					" turn on line numbers
set showmode 					" show '-- INSERT --'
set noruler					" turn off position information
set report=0					" don't show messages like '4 lines yanked'
set laststatus=0				" disable status line
set pumheight=10                                " Completion window max size
let loaded_matchparen = 1                       " don't highlight matching delims
set showmatch 					" jump to matching delim when typing
set matchtime=2 				" duration (1/10s) for showing matching delim

" use modern colors
syntax on					
set background=dark
colorscheme default
" Set split separator to simple dotted line
set encoding=utf8
set fillchars+=vert:\ 
highlight VertSplit cterm=NONE
" don't emphasize line numbers
highlight LineNr ctermfg=grey guifg=grey
" set omni completion menu to more sensible color
highlight Pmenu ctermbg=gray guibg=gray
highlight PmenuSel ctermbg=white guibg=white
