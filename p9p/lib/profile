prompt=('; ' '  ')

font=/mnt/font/LucidaSans/10a/font

NO_COLOR=1

BROWSER='brave-browser'
# EDITOR='E'
EDITOR='vi'
VISUAL=$EDITOR
PAGER=nobs
MANPAGER=nobs

. $home/Nextcloud/secrets/secrets.rc

NEXTCLOUD=$home/Nextcloud/
MARTIN=$home/src/work/martin-bidder
PLAN9=/usr/local/plan9
. $PLAN9/lib/acme.rc

GOROOT=/usr/local/go
GOPATH=$home/go
LC_ALL=en_US.utf8

SKIM_DEFAULT_OPTIONS='--color=bw'
FZF_DEFAULT_OPTS=--no-color

NVM_VERSION=$home/src/config/programs/nvm/versions/node/v12.18.4

JAVA_home=/usr/lib/jvm/java-14-openjdk
_JAVA_AWT_WM_NONREPARENTING=1 

HARVEY=$home/src/personal/harvey

VCPKG_ROOT=$home/vcpkg
OpenCV_DIR=$home/vcpkg/packages/opencv4_x64-linux/share/opencv
DCMAKE_TOOLCHAIN_FILE=$home/vcpkg/scripts/buildsystems/vcpkg.cmake
VCPKG_TARGET_TRIPLET=$home/vcpkg/installed/x64-linux
CMAKE_TOOLCHAIN_FILE=$home/vcpkg/scripts/buildsystems/vcpkg.cmake
SKIM=$home/.skim
SNAP=/snap/

path=(/bin /usr/bin /usr/local/bin $PLAN9/bin $home/bin/ $home/google-cloud-sdk/bin/ /usr/local/bin/ /usr/local/go/bin $home/go/bin/ $home/.local/bin $MARTIN/bin $VCPKG_ROOT $home/nand2tetris/tools/ $home/.cargo/bin $home/urbit $home/.gem/ruby/2.5.0/bin $home/.deno/bin/ $home/.yarn/bin $home/src/programs/nvm/versions/node/v14.4.0/bin $home/.linkerd2/bin $home/.krew/bin $NVM_VERSION/bin $home/appimage $HARVEY/linux_amd64/bin $SNAP/bin $SKIM/bin)

# if($INSIDE_ACME==1){
#	path=($PLAN9/bin $path)
# }

fn h{ cd $home }
fn mar{ cd $MARTIN }
fn per{ cd $home/src/personal }
fn next{ cd $NEXTCLOUD }
fn cfg{ cd $home/src/cfg }
fn dow{ cd $home/Downloads }
fn drop{ cd $home/Dropbox }
fn cl{ clear }
fn cd{ builtin cd $* && awd }
fn l{ 9 ls $* | mc }
fn la{ ls -a $* | mc }
fn '..'{ cd .. }
fn vi{ nvi $* }

fn code{ code-insiders $* }
fn e{ editinacme $* }

fn g{ git $* }
fn gs{ git status }
fn gc{ git commit -am $* }
fn gp{ git push }
fn ga{ git add }

fn t{ tmux -2 -u $* }
fn tat{ tmux attach -t $* }
fn ts{ tmux ls $* }
fn tk{ tmux kill-session -t $* }

fn pdf{ evince }

fn runlisp{ sbcl --script }

fn pf{ ipfs }
fn pfreadme{ ipfs cat /ipfs/QmS4ustL54uo8FzR9455qaxZwuMiUhyvMcX9Ba8nUH4uVv/readme }
pfbase=QmS4ustL54uo8FzR9455qaxZwuMiUhyvMcX9Ba8nUH4uVv

fn tf{ terraform $* -no-color }
fn tp{ terraform plan }
fn ta{ terraform apply }

fn k{ kubectl $* }
fn kpo{ kubectl get po $* }
fn wkpow{ watch kubectl get po -o wide }
fn ksv{ kubectl get svc $* }
fn kdp{ kubectl get deploy $* }
fn kin{ kubectl get ingress $* }
fn kdb{ kubectl -n db }
fn kmon{ kubectl -n monitoring }

fn redis-east-con{ redis-cli -u redis://$REDIS_EAST_SECRET@$REDIS_EAST_PUB/0 }
fn redis-west-con{ redis-cli -u redis://$REDIS_WEST_SECRET@$REDIS_WEST_PUB/0 }
fn redislabs-east-con{ redis-cli -u redis://$CACHE_EAST_SECRET@$CACHE_EAST_HOST/0 }
fn redislabs-west-con{ redis-cli -u redis://$CACHE_WEST_SECRET@$CACHE_WEST_HOST/0 }

fn dev-con{ gcloud beta container clusters get-credentials martin-bidder-dev-east --region us-east4 --project martin-bidder-dev }
fn stage-con{ gcloud beta container clusters get-credentials martin-bidder-stage-east --region us-east4 --project martin-bidder-stage }
fn stage-west-con{ gcloud beta container clusters get-credentials martin-bidder-stage-west --region us-west1 --project martin-bidder-stage }
fn prod-con{ gcloud beta container clusters get-credentials martin-bidder-prod-east --region us-east4 --project martin-bidder-prod }
fn prod-west-con{ gcloud beta container clusters get-credentials martin-bidder-prod-west --region us-west1 --project martin-bidder-prod }
fn test-con{ gcloud container clusters get-credentials martin-bidder-stage-test --region us-east4 --project martin-bidder-stage }

fn cg{ cargo }
fn cr{ cargo run }
fn cb{ cargo build }

fn scheme{ racket -l sicp --repl }

fn wtc{
	cmd=$*
	while(){
		echo '---------------------------------------'
		eval $cmd
		echo
		echo
		sleep 5
	}
}

fn nvm{
	bash $home/bin/nvm
}

fn proj{
	gcloud config configurations activate $1
	gcloud info | grep Project
}

fn mon{
	xrandr --output HDMI1 --right-of eDP1 --auto
}

fn startmail{
	plumber
	factotum
	factotum -g 'proto=pass service=imap server=imap.gmail.com user=daniel@martin.ai !password?'
	mailfs -t imap.gmail.com
}

fn plumb-update{
	cat $home/lib/plumbing | 9p write plumb/rules
}

fn psql-con{
	psql -Atx postgres://$DB_USER:$DB_PASSWORD@$DB_HOST/$DB_NAME
}

fn linkerd-start{
	linkerd dashboard $*
}

fn sniff{
	kubectl sniff $*
}

fn ssh-sdf{
	ssh danieljamespost@tty.sdf.org
}

fn ssh-plan9{
	ssh danieljamespost@vps2.sdf.org
}

fn goose-run{
	goose postgres postgres://$DB_USER:$DB_PASSWORD@$DB_HOST/$DB_NAME $*
}

fn kubepods{
	pat=$1
	cmd=$2
	pods=`{kubectl get po | rg $pat | awk '{print $1}'}
	for(i in $pods) eval $cmd
}

ignore='tags|TAGS|node_modules|.git'
fn f{
	pattern=$*
	for(file in `{9 du -a ./ | 9 awk '{print $2}' | 9 sed 's/\.\/\//.\//g' | 9 grep -v $ignore}){
		if(! 9 test -d $file && ! 9 test -x $file){
			9 grep -n $pattern $file | 9 awk '{print "'^$file:^'"$0}'
		}
	}
}

fn ff{
	toplevel=`{git rev-parse --show-toplevel}
	matches=`{>[2]/dev/null git ls-files $toplevel |9 grep $"*}
	switch ($#matches) {
		case 1
			B $matches(1)
		case *
			9 echo '-------- ff '^$"*^' --------'
			for (match in $matches) {
				9 echo $match
			}
	}
}


fn scaledeploy{
	for(i in `{kubectl get deploy | 9 grep $1 | 9 awk '{print $1}'}){
		kubectl scale deploy $i --replicas=$2
	}
}

fn restartdeploy{
	for(i in `{kubectl get deploy | 9 grep $1 | 9 awk '{print $1}'}){
		kubectl rollout restart deploy $i
	}
}


ps1=$prompt
tab='	'
nl='
'
fn cd{
	builtin cd $1 && awd &&
	switch($#*){
	case 0
		dir=$home
		prompt=($ps1 $tab)
	case *
		switch($1){
		case /*
			dir=$1
			prompt=($nl^'> '^`{basename `{pwd}}^$nl^$ps1 $tab)
		case */* ..*
			dir=()
			prompt=($nl^'> '^`{basename `{pwd}}^$nl^$ps1 $tab)
		case *
			dir=()
			prompt=($nl^'> '^`{basename `{pwd}}^$nl^$ps1 $tab)
		}
	}
}

fn pwd{
	if(~ $#dir 0)
		dir=â€˜{/bin/pwd}
	echo $dir
}

fn awk{ 9 awk $* }
fn bunzip2{ 9 bunzip2 $* }
fn bzip2{ 9 bzip2 $* }
fn cat{ 9 cat $* }
fn dd{ 9 dd $* }
fn echo{ 9 echo $* }
fn ed{ 9 ed $* }
fn fmt{ 9 fmt $* }
fn lc{ 9 lc $* }
fn ls{ 9 ls $* }
fn mk{ 9 mk $* }
fn mkdir{ 9 mkdir $* }
fn nroff{ 9 nroff $* }
fn ps{ 9 ps $* }
fn rm{ 9 rm $* }
fn sed{ 9 sed $* }
fn zip{ 9 zip $* }

